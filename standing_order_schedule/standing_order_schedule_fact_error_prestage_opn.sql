/* error prestage - drop intermediate error prestage table */
DROP TABLE IF EXISTS DW_PRESTAGE.STANDING_ORDER_SCHEDULE_FACT_ERROR;

/* prestage - create intermediate insert table*/
CREATE TABLE DW_PRESTAGE.STANDING_ORDER_SCHEDULE_FACT_ERROR
AS
SELECT
      A.STANDING_ORDER_SCHEDULE_ID    
     ,NVL(A.ACTUAL_SHIPMENT_DATE_KEY,B.DATE_KEY) ACTUAL_SHIPMENT_DATE_KEY        
     ,A.AMORTIZATION_VALUE_EXCL_GST   
     ,A.AMORTIZATION_VALUE_INCL_GST   
     ,NVL(A.CUSTOMER_KEY,D.CUSTOMER_KEY )   CUSTOMER_KEY               
     ,NVL(A.EXPECTED_SHIPMENT_DATE_KEY,C.DATE_KEY) EXPECTED_SHIPMENT_DATE_KEY     
     ,A.INVOICE_AMOUNT                
     ,A.INVOICE_NO_ID                 
     ,A.IS_INACTIVE                   
     ,A.LINE_NO                       
     ,A.ORDER_TYPE                    
     ,A.PICK_SLIP_NUMBER              
     ,NVL(A.PRODUCT_CATALOGUE_KEY,E.PRODUCT_CATALOGUE_KEY) PRODUCT_CATALOGUE_KEY          
     ,A.SALES_ORDER_NO_ID             
     ,A.SCHEDULE_CLOSED               
     ,A.SHIPMENT_NO                 
     ,A.SHIPMENT_YYYYMM               
     ,NVL(A.STO_ITEM_KEY,F.ITEM_KEY) STO_ITEM_KEY                  
     ,A.STO_NO_TEXT                   
     ,A.STO_NO_ID                     
     ,NVL(A.SUBSIDIARY_KEY,G.SUBSIDIARY_KEY) SUBSIDIARY_KEY
     ,NVL(A.STO_START_DATE_KEY,H.DATE_KEY) STO_START_DATE_KEY
     ,NVL(A.STO_END_DATE_KEY,I.DATE_KEY) STO_END_DATE_KEY 
     ,NVL(A.LEVEL_KEY,J.ITEM_KEY) LEVEL_KEY           
     'PROCESSED'  RECORD_STATUS,
     SYSDATE  DW_CREATION_DATE
 FROM DW.STANDING_ORDER_SCHEDULE_FACT_ERROR A
    INNER JOIN DW.DWDATE B ON (NVL(TO_CHAR (A.ACTUAL_SHIPMENT_DATE,'YYYYMMDD'),'19000101') = B.DATE_ID)
    INNER JOIN DW.DWDATE C ON (NVL(TO_CHAR (A.EXPECTED_SHIPMENT_DATE,'YYYYMMDD'),'19000101') = C.DATE_ID) 
    INNER JOIN DW_REPORT.CUSTOMERS D ON (NVL (A.CUSTOMER_ID,-99) = D.CUSTOMER_ID)
    INNER JOIN DW_REPORT.PRODUCT_CATALOGUE E ON (NVL (A.PRODUCT_CATALOGUE_LIST_ID,-99) = E.PRODUCT_CATALOGUE_ID)
    INNER JOIN DW_REPORT.ITEMS F ON (NVL (A.STO_ITEM_ID,-99) = F.ITEM_ID) 
    INNER JOIN DW_REPORT.SUBSIDIARIES G ON (NVL (A.SUBSIDIARY_ID,-99) = G.SUBSIDIARY_ID)
    INNER JOIN DW.DWDATE H ON (NVL(TO_CHAR (A.STO_START_DATE,'YYYYMMDD'),'19000101') = H.DATE_ID) 
    INNER JOIN DW.DWDATE I ON (NVL(TO_CHAR (A.STO_END_DATE,'YYYYMMDD'),'19000101') = I.DATE_ID)
    INNER JOIN DW_REPORT.ITEMS J ON (NVL (A.LEVEL_ID,-99) = J.ITEM_ID) 
WHERE A.RUNID = NVL(RUNID_ERR,A.RUNID)
AND RECORD_STATUS = 'ERROR';

/* prestage-> identify new revenue fact records */
UPDATE DW_PRESTAGE.STANDING_ORDER_SCHEDULE_FACT_ERROR A
 SET RECORD_STATUS = 'INSERT'
 WHERE NOT EXISTS
 (SELECT 1 FROM DW_REPORT.STANDING_ORDER_SCHEDULE_FACT B
 WHERE A.STANDING_ORDER_SCHEDULE_ID = B.STANDING_ORDER_SCHEDULE_ID
 AND A.SUBSIDIARY_KEY = B.SUBSIDIARY_KEY );

/* prestage-> no of budget forecast fact records reprocessed in staging*/
SELECT count(1) FROM dw_prestage.STANDING_ORDER_SCHEDULE_FACT_ERROR;

/* prestage-> no of budget forecast fact records identified as new*/
SELECT count(1) FROM dw_prestage.STANDING_ORDER_SCHEDULE_FACT_ERROR where RECORD_STATUS = 'INSERT';

/* prestage-> no of budget forecast fact records identified to be updated*/
SELECT count(1) FROM dw_prestage.STANDING_ORDER_SCHEDULE_FACT_ERROR where RECORD_STATUS = 'PROCESSED';

/* fact -> INSERT REPROCESSED RECORDS WHICH HAS ALL VALID DIMENSIONS */
INSERT INTO dw.STANDING_ORDER_SCHEDULE_fact
(
  STANDING_ORDER_SCHEDULE_ID    
 ,ACTUAL_SHIPMENT_DATE_KEY      
 ,AMORTIZATION_VALUE_EXCL_GST   
 ,AMORTIZATION_VALUE_INCL_GST   
 ,CUSTOMER_KEY                  
 ,EXPECTED_SHIPMENT_DATE_KEY    
 ,INVOICE_AMOUNT                
 ,INVOICE_NO_ID                 
 ,IS_INACTIVE                   
 ,LINE_NO                       
 ,ORDER_TYPE                    
 ,PICK_SLIP_NUMBER              
 ,PRODUCT_CATALOGUE_KEY         
 ,SALES_ORDER_NO_ID             
 ,SCHEDULE_CLOSED               
 ,SHIPMENT_NO                 
 ,SHIPMENT_YYYYMM               
 ,STO_ITEM_KEY                  
 ,STO_NO_TEXT                   
 ,STO_NO_ID                     
 ,SUBSIDIARY_KEY
 ,STO_START_DATE_KEY
 ,STO_END_DATE_KEY
 ,LEVEL_KEY                   
 ,DATE_ACTIVE_FROM
 ,DATE_ACTIVE_TO
 ,DW_CURRENT 
  )  
SELECT
  STANDING_ORDER_SCHEDULE_ID    
 ,ACTUAL_SHIPMENT_DATE_KEY      
 ,AMORTIZATION_VALUE_EXCL_GST   
 ,AMORTIZATION_VALUE_INCL_GST   
 ,CUSTOMER_KEY                  
 ,EXPECTED_SHIPMENT_DATE_KEY    
 ,INVOICE_AMOUNT                
 ,INVOICE_NO_ID                 
 ,IS_INACTIVE                   
 ,LINE_NO                       
 ,ORDER_TYPE                    
 ,PICK_SLIP_NUMBER              
 ,PRODUCT_CATALOGUE_KEY         
 ,SALES_ORDER_NO_ID             
 ,SCHEDULE_CLOSED               
 ,SHIPMENT_NO                 
 ,SHIPMENT_YYYYMM               
 ,STO_ITEM_KEY                  
 ,STO_NO_TEXT                   
 ,STO_NO_ID                     
 ,SUBSIDIARY_KEY
 ,STO_START_DATE_KEY
 ,STO_END_DATE_KEY
 ,LEVEL_KEY                   
  SYSDATE AS DATE_ACTIVE_FROM,
  '9999-12-31 11:59:59' AS DATE_ACTIVE_TO,
  1 AS DW_CURRENT
 FROM
  DW_PRESTAGE.STANDING_ORDER_SCHEDULE_FACT_ERROR A
 WHERE 
 RECORD_STATUS = 'INSERT';
 
 /* fact -> UPDATE THE OLD RECORDS SETTING THE CURRENT FLAG VALUE TO 0 */
UPDATE dw.STANDING_ORDER_SCHEDULE_fact SET dw_current = 0,DATE_ACTIVE_TO = (sysdate -1) WHERE dw_current = 1
AND   sysdate>= date_active_from
AND   sysdate< date_active_to
AND   EXISTS (SELECT 1 FROM dw_prestage.STANDING_ORDER_SCHEDULE_FACT_ERROR
  WHERE dw.STANDING_ORDER_SCHEDULE_fact.STANDING_ORDER_SCHEDULE_ID = dw_prestage.STANDING_ORDER_SCHEDULE_FACT_ERROR.STANDING_ORDER_SCHEDULE_ID
  AND dw.STANDING_ORDER_SCHEDULE_fact.subsidiary_id = dw_prestage.STANDING_ORDER_SCHEDULE_FACT_ERROR.subsidiary_id
  AND dw_prestage.STANDING_ORDER_SCHEDULE_FACT_ERROR.RECORD_STATUS = 'PROCESSED');
  
/* fact -> INSERT UPDATED REPROCESSED RECORDS WHICH HAVE ALL VALID DIMENSIONS*/
INSERT INTO dw.STANDING_ORDER_SCHEDULE_fact
(
  STANDING_ORDER_SCHEDULE_ID    
 ,ACTUAL_SHIPMENT_DATE_KEY      
 ,AMORTIZATION_VALUE_EXCL_GST   
 ,AMORTIZATION_VALUE_INCL_GST   
 ,CUSTOMER_KEY                  
 ,EXPECTED_SHIPMENT_DATE_KEY    
 ,INVOICE_AMOUNT                
 ,INVOICE_NO_ID                 
 ,IS_INACTIVE                   
 ,LINE_NO                       
 ,ORDER_TYPE                    
 ,PICK_SLIP_NUMBER              
 ,PRODUCT_CATALOGUE_KEY         
 ,SALES_ORDER_NO_ID             
 ,SCHEDULE_CLOSED               
 ,SHIPMENT_NO                 
 ,SHIPMENT_YYYYMM               
 ,STO_ITEM_KEY                  
 ,STO_NO_TEXT                   
 ,STO_NO_ID                     
 ,SUBSIDIARY_KEY
 ,STO_START_DATE_KEY
 ,STO_END_DATE_KEY
 ,LEVEL_KEY                   
 ,DATE_ACTIVE_FROM
 ,DATE_ACTIVE_TO
 ,DW_CURRENT 
  )  
SELECT
  STANDING_ORDER_SCHEDULE_ID    
 ,ACTUAL_SHIPMENT_DATE_KEY      
 ,AMORTIZATION_VALUE_EXCL_GST   
 ,AMORTIZATION_VALUE_INCL_GST   
 ,CUSTOMER_KEY                  
 ,EXPECTED_SHIPMENT_DATE_KEY    
 ,INVOICE_AMOUNT                
 ,INVOICE_NO_ID                 
 ,IS_INACTIVE                   
 ,LINE_NO                       
 ,ORDER_TYPE                    
 ,PICK_SLIP_NUMBER              
 ,PRODUCT_CATALOGUE_KEY         
 ,SALES_ORDER_NO_ID             
 ,SCHEDULE_CLOSED               
 ,SHIPMENT_NO                 
 ,SHIPMENT_YYYYMM               
 ,STO_ITEM_KEY                  
 ,STO_NO_TEXT                   
 ,STO_NO_ID                     
 ,SUBSIDIARY_KEY
 ,STO_START_DATE_KEY
 ,STO_END_DATE_KEY
 ,LEVEL_KEY                   
  SYSDATE AS DATE_ACTIVE_FROM,
  '9999-12-31 11:59:59' AS DATE_ACTIVE_TO,
  1 AS DW_CURRENT
 FROM
  DW_PRESTAGE.STANDING_ORDER_SCHEDULE_FACT_ERROR A
 WHERE 
 RECORD_STATUS = 'PROCESSED';
 
  /* fact -> UPDATE THE ERROR TABLE TO SET THE SATUS AS PROCESSED */
UPDATE dw.STANDING_ORDER_SCHEDULE_fact_error SET RECORD_STATUS = 'PROCESSED'
where exists ( select 1 from dw_prestage.STANDING_ORDER_SCHEDULE_fact_error b
  WHERE dw.STANDING_ORDER_SCHEDULE_fact_error.RUNID = b.RUNID
  AND dw.STANDING_ORDER_SCHEDULE_fact_error.STANDING_ORDER_SCHEDULE_id = b.transaction_id);