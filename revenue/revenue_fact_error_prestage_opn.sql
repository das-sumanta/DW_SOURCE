/* error prestage - drop intermediate error prestage table */
DROP TABLE IF EXISTS DW_PRESTAGE.REVENUE_FACT_ERROR;

/* prestage - create intermediate insert table*/
CREATE TABLE DW_PRESTAGE.REVENUE_FACT_ERROR
AS
SELECT
  A.RUNID
, A.DOCUMENT_NUMBER
,A.TRANSACTION_ID
,A.TRANSACTION_LINE_ID
,A.REF_DOC_NUMBER
,NVL(A.REF_DOC_TYPE_KEY,N.TRANSACTION_TYPE_KEY)  REF_DOC_TYPE_KEY
,NVL(A.TERMS_KEY,B.PAYMENT_TERM_KEY)  TERMS_KEY
,A.REVENUE_COMMITMENT_STATUS
,A.REVENUE_STATUS
,NVL(A.SALES_REP_KEY,R.EMPLOYEE_KEY)  SALES_REP_KEY
,NVL(A.TERRITORY_KEY,C.TERRITORY_KEY)  TERRITORY_KEY
,A.BILL_ADDRESS_LINE_1
,A.BILL_ADDRESS_LINE_2
,A.BILL_ADDRESS_LINE_3
,A.BILL_CITY
,A.BILL_COUNTRY
,A.BILL_STATE
,A.BILL_ZIP
,A.SHIP_ADDRESS_LINE_1
,A.SHIP_ADDRESS_LINE_2
,A.SHIP_ADDRESS_LINE_3
,A.SHIP_CITY
,A.SHIP_COUNTRY
,A.SHIP_STATE
,A.SHIP_ZIP
,NVL(A.DOCUMENT_STATUS_KEY,O.TRANSACTION_STATUS_KEY)   DOCUMENT_STATUS_KEY
,NVL(A.DOCUMENT_TYPE_KEY,P.TRANSACTION_TYPE_KEY)     DOCUMENT_TYPE_KEY
,NVL(A.CURRENCY_KEY,D.CURRENCY_KEY)  CURRENCY_KEY
,NVL(A.TRANSACTION_DATE_KEY,E.DATE_KEY)  TRANSACTION_DATE_KEY
,EXCHANGE_RATE
,NVL(A.ACCOUNT_KEY,F.ACCOUNT_KEY)  ACCOUNT_KEY
,A.AMOUNT
,A.AMOUNT_FOREIGN
,A.GROSS_AMOUNT
,A.NET_AMOUNT
,A.NET_AMOUNT_FOREIGN
,A.QUANTITY
 ,NVL(A.ITEM_KEY,G.ITEM_KEY)  ITEM_KEY
 ,A.RATE
 ,NVL(A.TAX_ITEM_KEY,H.TAX_ITEM_KEY)  TAX_ITEM_KEY
 ,TAX_AMOUNT
 ,NVL(A.LOCATION_KEY,K.LOCATION_KEY)  LOCATION_KEY
 ,NVL(A.CLASS_KEY,L.CLASS_KEY)  CLASS_KEY
 ,NVL(A.SUBSIDIARY_KEY,J.SUBSIDIARY_KEY)  SUBSIDIARY_KEY
 ,NVL(A.CUSTOMER_KEY,M.CUSTOMER_KEY)  CUSTOMER_KEY
 ,NVL(A.ACCOUNTING_PERIOD_KEY,Q.ACCOUNTING_PERIOD_KEY)  ACCOUNTING_PERIOD_KEY
 ,A.REF_CUSTOM_FORM_ID
,'PROCESSED'  RECORD_STATUS
,SYSDATE  DW_CREATION_DATE
 FROM DW.REVENUE_FACT_ERROR A
INNER JOIN DW_REPORT.PAYMENT_TERMS b ON (NVL (A.PAYMENT_TERMS_ID,-99) = b.PAYMENT_TERMS_ID)
 INNER JOIN DW_REPORT.territories c ON (NVL (A.sales_territory_ID,-99) = c.territory_ID)
 INNER JOIN DW_REPORT.CURRENCIES d ON (A.CURRENCY_ID = d.CURRENCY_ID)
 INNER JOIN DW_REPORT.DWDATE e ON (TO_CHAR (A.tranDATE,'YYYYMMDD') = e.DATE_ID)
 INNER JOIN DW_REPORT.ACCOUNTS F ON (NVL (A.account_ID,-99) = f.account_ID)
 INNER JOIN DW_REPORT.ITEMS g ON (A.ITEM_ID = g.ITEM_ID)
 INNER JOIN DW_REPORT.TAX_ITEMS h ON (NVL(A.TAX_ITEM_ID,-99) = h.ITEM_ID)
 INNER JOIN DW_REPORT.SUBSIDIARIES j ON (A.SUBSIDIARY_ID = j.SUBSIDIARY_ID)
 INNER JOIN DW_REPORT.LOCATIONS k ON (NVL (A.LOCATION_ID,-99) = k.LOCATION_ID)
 INNER JOIN DW_REPORT.CLASSES l ON (NVL(A.CLASS_ID,-99) = l.CLASS_ID)
 INNER JOIN DW_REPORT.customers m ON (A.customer_ID = m.customer_ID)
 INNER JOIN DW_REPORT.transaction_type n ON (NVL(A.ref_custom_form_id,-99) = n.transaction_type_id)
 INNER JOIN DW_REPORT.transaction_status o ON (NVL(A.STATUS,'NA_GDW') = o.status AND NVL(A.TRANSACTION_TYPE,'NA_GDW') = o.DOCUMENT_TYPE)
 INNER JOIN DW_REPORT.transaction_type p ON (A.custom_form_id = p.transaction_type_id)
 INNER JOIN DW_REPORT.accounting_period q ON (NVL(A.accounting_period_id,-99) = q.accounting_period_id)
 INNER JOIN DW_REPORT.employees r ON (NVL(A.sales_rep_id,-99) = r.employee_id)
WHERE A.RUNID = NVL('%RUNID_ERR',A.RUNID);

/* prestage-> identify new revenue fact records */
UPDATE DW_PRESTAGE.REVENUE_FACT_ERROR
 SET RECORD_STATUS = 'INSERT'
 WHERE NOT EXISTS
 (SELECT 1 FROM DW_REPORT.REVENUE_FACT B
 WHERE DW_PRESTAGE.REVENUE_FACT_ERROR.TRANSACTION_ID = B.TRANSACTION_ID
 AND DW_PRESTAGE.REVENUE_FACT_ERROR.TRANSACTION_LINE_ID = B.TRANSACTION_LINE_ID
 AND DW_PRESTAGE.REVENUE_FACT_ERROR.SUBSIDIARY_KEY = B.SUBSIDIARY_KEY );

/* prestage-> no of revenue fact records reprocessed in staging*/
SELECT count(1) FROM dw_prestage.revenue_fact_error;

/* prestage-> no of revenue fact records identified as new*/
SELECT count(1) FROM dw_prestage.revenue_fact_error where RECORD_STATUS = 'INSERT';

/* prestage-> no of revenue fact records identified to be updated*/
SELECT count(1) FROM dw_prestage.revenue_fact_error where RECORD_STATUS = 'PROCESSED';

/* fact -> INSERT REPROCESSED RECORDS WHICH HAS ALL VALID DIMENSIONS */
INSERT INTO dw.revenue_fact
(
DOCUMENT_NUMBER
,TRANSACTION_ID
,TRANSACTION_LINE_ID
,REF_DOC_NUMBER
,REF_DOC_TYPE_KEY
,TERMS_KEY
,REVENUE_COMMITMENT_STATUS
,REVENUE_STATUS
,SALES_REP_KEY
,TERRITORY_KEY
,BILL_ADDRESS_LINE_1
,BILL_ADDRESS_LINE_2
,BILL_ADDRESS_LINE_3
,BILL_CITY
,BILL_COUNTRY
,BILL_STATE
,BILL_ZIP
,SHIP_ADDRESS_LINE_1
,SHIP_ADDRESS_LINE_2
,SHIP_ADDRESS_LINE_3
,SHIP_CITY
,SHIP_COUNTRY
,SHIP_STATE
,SHIP_ZIP
,DOCUMENT_STATUS_KEY
,DOCUMENT_TYPE_KEY
,CURRENCY_KEY
,TRANSACTION_DATE_KEY
,EXCHANGE_RATE
,ACCOUNT_KEY
,AMOUNT
,AMOUNT_FOREIGN
,GROSS_AMOUNT
,NET_AMOUNT
,NET_AMOUNT_FOREIGN
,QUANTITY
,ITEM_KEY
,RATE
,TAX_ITEM_KEY
,TAX_AMOUNT
,LOCATION_KEY
,CLASS_KEY
,SUBSIDIARY_KEY
,CUSTOMER_KEY
,ACCOUNTING_PERIOD_KEY
,DATE_ACTIVE_FROM
,DATE_ACTIVE_TO
,DW_CURRENT
)
SELECT
 A.DOCUMENT_NUMBER
,A.TRANSACTION_ID
,A.TRANSACTION_LINE_ID
,A.REF_DOC_NUMBER
,A.REF_DOC_TYPE_KEY
,A.TERMS_KEY
,A.REVENUE_COMMITMENT_STATUS
,A.REVENUE_STATUS
,A.SALES_REP_KEY
,A.TERRITORY_KEY
,A.BILL_ADDRESS_LINE_1
,A.BILL_ADDRESS_LINE_2
,A.BILL_ADDRESS_LINE_3
,A.BILL_CITY
,A.BILL_COUNTRY
,A.BILL_STATE
,A.BILL_ZIP
,A.SHIP_ADDRESS_LINE_1
,A.SHIP_ADDRESS_LINE_2
,A.SHIP_ADDRESS_LINE_3
,A.SHIP_CITY
,A.SHIP_COUNTRY
,A.SHIP_STATE
,A.SHIP_ZIP
,A.DOCUMENT_STATUS_KEY
,A.DOCUMENT_TYPE_KEY
,A.CURRENCY_KEY
,A.TRANSACTION_DATE_KEY
,A.EXCHANGE_RATE
,A.ACCOUNT_KEY
,A.AMOUNT
,A.AMOUNT_FOREIGN
,A.GROSS_AMOUNT
,A.NET_AMOUNT
,A.NET_AMOUNT_FOREIGN
,A.QUANTITY
,A.ITEM_KEY
,A.RATE
,A.TAX_ITEM_KEY
,A.TAX_AMOUNT
,A.LOCATION_KEY
,A.CLASS_KEY
,A.SUBSIDIARY_KEY
,A.CUSTOMER_KEY
,A.ACCOUNTING_PERIOD_KEY  
,SYSDATE AS DATE_ACTIVE_FROM
 ,'9999-12-31 11:59:59' AS DATE_ACTIVE_TO
 ,1 AS DW_CURRENT
 FROM
 DW_PRESTAGE.REVENUE_FACT_ERROR A
 WHERE 
 RECORD_STATUS = 'INSERT';
 
 /* fact -> UPDATE THE OLD RECORDS SETTING THE CURRENT FLAG VALUE TO 0 */
UPDATE dw.revenue_fact SET dw_current = 0,DATE_ACTIVE_TO = (sysdate -1) WHERE dw_current = 1
AND   sysdate>= date_active_from
AND   sysdate< date_active_to
AND   EXISTS (SELECT 1 FROM dw_prestage.revenue_fact_error
  WHERE dw.revenue_fact.transaction_ID = dw_prestage.revenue_fact_error.transaction_id
  AND   dw.revenue_fact.transaction_LINE_ID = dw_prestage.revenue_fact_error.transaction_line_id
  AND dw.revenue_fact.subsidiary_KEY = dw_prestage.revenue_fact_error.subsidiary_key
  AND dw_prestage.revenue_fact_error.RECORD_STATUS = 'PROCESSED');
  
/* fact -> INSERT UPDATED REPROCESSED RECORDS WHICH HAVE ALL VALID DIMENSIONS*/
INSERT INTO dw.revenue_fact
(
DOCUMENT_NUMBER
,TRANSACTION_ID
,TRANSACTION_LINE_ID
,REF_DOC_NUMBER
,REF_DOC_TYPE_KEY
,TERMS_KEY
,REVENUE_COMMITMENT_STATUS
,REVENUE_STATUS
,SALES_REP_KEY
,TERRITORY_KEY
,BILL_ADDRESS_LINE_1
,BILL_ADDRESS_LINE_2
,BILL_ADDRESS_LINE_3
,BILL_CITY
,BILL_COUNTRY
,BILL_STATE
,BILL_ZIP
,SHIP_ADDRESS_LINE_1
,SHIP_ADDRESS_LINE_2
,SHIP_ADDRESS_LINE_3
,SHIP_CITY
,SHIP_COUNTRY
,SHIP_STATE
,SHIP_ZIP
,DOCUMENT_STATUS_KEY
,DOCUMENT_TYPE_KEY
,CURRENCY_KEY
,TRANSACTION_DATE_KEY
,EXCHANGE_RATE
,ACCOUNT_KEY
,AMOUNT
,AMOUNT_FOREIGN
,GROSS_AMOUNT
,NET_AMOUNT
,NET_AMOUNT_FOREIGN
,QUANTITY
,ITEM_KEY
,RATE
,TAX_ITEM_KEY
,TAX_AMOUNT
,LOCATION_KEY
,CLASS_KEY
,SUBSIDIARY_KEY
,CUSTOMER_KEY
,ACCOUNTING_PERIOD_KEY
,DATE_ACTIVE_FROM
,DATE_ACTIVE_TO
,DW_CURRENT
)
SELECT
 A.DOCUMENT_NUMBER
,A.TRANSACTION_ID
,A.TRANSACTION_LINE_ID
,A.REF_DOC_NUMBER
,A.REF_DOC_TYPE_KEY
,A.TERMS_KEY
,A.REVENUE_COMMITMENT_STATUS
,A.REVENUE_STATUS
,A.SALES_REP_KEY
,A.TERRITORY_KEY
,A.BILL_ADDRESS_LINE_1
,A.BILL_ADDRESS_LINE_2
,A.BILL_ADDRESS_LINE_3
,A.BILL_CITY
,A.BILL_COUNTRY
,A.BILL_STATE
,A.BILL_ZIP
,A.SHIP_ADDRESS_LINE_1
,A.SHIP_ADDRESS_LINE_2
,A.SHIP_ADDRESS_LINE_3
,A.SHIP_CITY
,A.SHIP_COUNTRY
,A.SHIP_STATE
,A.SHIP_ZIP
,A.DOCUMENT_STATUS_KEY
,A.DOCUMENT_TYPE_KEY
,A.CURRENCY_KEY
,A.TRANSACTION_DATE_KEY
,A.EXCHANGE_RATE
,A.ACCOUNT_KEY
,A.AMOUNT
,A.AMOUNT_FOREIGN
,A.GROSS_AMOUNT
,A.NET_AMOUNT
,A.NET_AMOUNT_FOREIGN
,A.QUANTITY
,A.ITEM_KEY
,A.RATE
,A.TAX_ITEM_KEY
,A.TAX_AMOUNT
,A.LOCATION_KEY
,A.CLASS_KEY
,A.SUBSIDIARY_KEY
,A.CUSTOMER_KEY
,A.ACCOUNTING_PERIOD_KEY  
,SYSDATE AS DATE_ACTIVE_FROM
 ,'9999-12-31 11:59:59' AS DATE_ACTIVE_TO
 ,1 AS DW_CURRENT
 FROM
 DW_PRESTAGE.REVENUE_FACT_ERROR A
 WHERE 
 RECORD_STATUS = 'PROCESSED';
 
/* fact -> UPDATE THE ERROR TABLE TO SET THE SATUS AS PROCESSED */
UPDATE dw.revenue_fact_error SET RECORD_STATUS = 'PROCESSED'
where exists ( select 1 from dw_prestage.revenue_fact_error b
  WHERE dw.revenue_fact_error.RUNID = b.RUNID
  AND dw.revenue_fact_error.transaction_id = b.transaction_id
  AND dw.revenue_fact_error.transaction_line_id = b.transaction_line_id);
