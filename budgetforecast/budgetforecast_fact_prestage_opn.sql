/* prestage - drop intermediate insert table */
DROP TABLE IF EXISTS DW_PRESTAGE.BUDGETFORECAST_FACT_INSERT;

/* prestage - create intermediate insert table*/
CREATE TABLE DW_PRESTAGE.BUDGETFORECAST_FACT_INSERT 
AS
SELECT *
FROM DW_PRESTAGE.BUDGETFORECAST_FACT A
WHERE NOT EXISTS ( SELECT 1 
   FROM DW_STAGE.BUDGETFORECAST_FACT B
WHERE B.BUDGETFORECAST_ID = A.BUDGETFORECAST_ID
     AND B.SUBSIDIARY_ID = A.SUBSIDIARY_ID);

/* prestage - drop intermediate update table*/
DROP TABLE IF EXISTS DW_PRESTAGE.BUDGETFORECAST_FACT_UPDATE;

/* prestage - create intermediate update table*/
CREATE TABLE DW_PRESTAGE.BUDGETFORECAST_FACT_UPDATE 
AS
SELECT *
FROM DW_PRESTAGE.BUDGETFORECAST_FACT A
WHERE EXISTS ( SELECT 1 FROM
                     ( SELECT  
                       BUDGETFORECAST_ID
                      ,BUDGETFORECAST_NAME
                      ,FISCAL_MONTH_ID
                      ,FISCAL_WEEK_ID
                      ,LINE_OF_BUSINESS_ID
                      ,REGIONSALES_TERRITORY_ID
                      ,SUBSIDIARY_ID
                      ,MONTH_END_DATE
                      ,MONTH_START_DATE
                      ,WEEK_START_DATE
                      ,WEEK_END_DATE
                      ,AMOUNT
                      ,IS_INACTIVE
                      ,BUDGETFORECAST_TYPE 
                  FROM DW_PRESTAGE.BUDGETFORECAST_FACT A
                  MINUS
                  SELECT  
                       BUDGETFORECAST_ID
                      ,BUDGETFORECAST_NAME
                      ,FISCAL_MONTH_ID
                      ,FISCAL_WEEK_ID
                      ,LINE_OF_BUSINESS_ID
                      ,REGIONSALES_TERRITORY_ID
                      ,SUBSIDIARY_ID
                      ,MONTH_END_DATE
                      ,MONTH_START_DATE
                      ,WEEK_START_DATE
                      ,WEEK_END_DATE
                      ,AMOUNT
                      ,IS_INACTIVE
                      ,BUDGETFORECAST_TYPE 
   FROM DW_STAGE.BUDGETFORECAST_FACT B
WHERE EXISTS ( SELECT 1 FROM DW_PRESTAGE.BUDGETFORECAST_FACT B1
WHERE B1.BUDGETFORECAST_ID = B.BUDGETFORECAST_ID
     AND B1.SUBSIDIARY_ID = B.SUBSIDIARY_ID)) A1
     WHERE A1.BUDGETFORECAST_ID = A.BUDGETFORECAST_ID) 
AND NOT EXISTS ( SELECT 1 FROM DW_PRESTAGE.BUDGETFORECAST_FACT_INSERT C
WHERE A.BUDGETFORECAST_ID = C.BUDGETFORECAST_ID);

/* prestage - drop intermediate no change track table*/
DROP TABLE IF EXISTS DW_PRESTAGE.BUDGETFORECAST_FACT_NOCHANGE;

/* prestage - create intermediate no change track table*/
CREATE TABLE DW_PRESTAGE.BUDGETFORECAST_FACT_NOCHANGE 
AS
SELECT BUDGETFORECAST_ID
FROM (SELECT BUDGETFORECAST_ID
      FROM DW_PRESTAGE.BUDGETFORECAST_FACT
      MINUS
      (SELECT BUDGETFORECAST_ID
      FROM DW_PRESTAGE.BUDGETFORECAST_FACT_INSERT
      UNION ALL
      SELECT BUDGETFORECAST_ID
      FROM DW_PRESTAGE.BUDGETFORECAST_FACT_UPDATE));

/* prestage-> no of budgetforecast fact records ingested in staging*/
SELECT count(1) FROM dw_prestage.budgetforecast_fact;

/* prestage-> no of budgetforecast fact records identified to inserted*/
SELECT count(1) FROM dw_prestage.budgetforecast_fact_insert;

/* prestage-> no of budgetforecast fact records identified to updated*/
SELECT count(1) FROM dw_prestage.budgetforecast_fact_update;

/* prestage-> no of budgetforecast fact records identified as no change*/
SELECT count(1) FROM dw_prestage.budgetforecast_fact_nochange;

/* stage -> delete from stage records to be updated */ 
DELETE
FROM DW_STAGE.BUDGETFORECAST_FACT USING DW_PRESTAGE.BUDGETFORECAST_FACT_UPDATE
WHERE DW_STAGE.BUDGETFORECAST_FACT.BUDGETFORECAST_ID = DW_PRESTAGE.BUDGETFORECAST_FACT_UPDATE.BUDGETFORECAST_ID
AND DW_STAGE.BUDGETFORECAST_FACT.SUBSIDIARY_ID = DW_PRESTAGE.BUDGETFORECAST_FACT_UPDATE.SUBSIDIARY_ID;

/* stage -> insert into stage records which have been created */ 
INSERT INTO DW_STAGE.BUDGETFORECAST_FACT
SELECT *
FROM DW_PRESTAGE.BUDGETFORECAST_FACT_INSERT;

/* stage -> insert into stage records which have been updated */ 
INSERT INTO DW_STAGE.BUDGETFORECAST_FACT
SELECT *
FROM DW_PRESTAGE.BUDGETFORECAST_FACT_UPDATE;


/* fact -> INSERT NEW RECORDS WHICH HAS ALL VALID DIMENSIONS */ 
INSERT INTO dw.budgetforecast_fact
(
  BUDGETFORECAST_ID   
 ,BUDGETFORECAST_NAME   
 ,FISCAL_MONTH_ID       
 ,FISCAL_WEEK_ID        
 ,CLASS_KEY             
 ,TERRITORY_KEY         
 ,SUBSIDIARY_KEY        
 ,BUDGETFORECAST_TYPE   
 ,MONTH_END_DATE        
 ,MONTH_START_DATE      
 ,WEEK_START_DATE       
 ,WEEK_END_DATE         
 ,AMOUNT                
 ,IS_INACTIVE           
 ,CREATION_DATE         
 ,LAST_MODIFIED_DATE    
 ,DATE_ACTIVE_FROM      
 ,DATE_ACTIVE_TO        
 ,DW_CURRENT            
  )  
SELECT 
  A.BUDGETFORECAST_ID   
 ,A.BUDGETFORECAST_NAME   
 ,A.FISCAL_MONTH_ID       
 ,A.FISCAL_WEEK_ID
 ,B.CLASS_KEY
 ,C.TERRITORY_KEY
 ,D.SUBSIDIARY_KEY        
 ,BUDGETFORECAST_TYPE   
 ,MONTH_END_DATE        
 ,MONTH_START_DATE      
 ,WEEK_START_DATE       
 ,WEEK_END_DATE         
 ,AMOUNT                
 ,A.IS_INACTIVE           
 ,DATE_CREATED         
 ,LAST_MODIFIED_DATE    
 ,SYSDATE AS DATE_ACTIVE_FROM
 ,'9999-12-31 11:59:59' AS DATE_ACTIVE_TO
 ,1 AS DW_CURRENT
 FROM
  DW_PRESTAGE.BUDGETFORECAST_FACT_INSERT A
  INNER JOIN DW_REPORT.CLASSES B ON (A.LINE_OF_BUSINESS_ID = B.CLASS_ID) 
  INNER JOIN DW_REPORT.territories C ON (A.REGIONSALES_TERRITORY_ID = C.TERRITORY_ID)
  INNER JOIN DW_REPORT.SUBSIDIARIES D ON (A.SUBSIDIARY_ID = D.SUBSIDIARY_ID);
  
/* fact -> INSERT NEW RECORDS IN ERROR TABLE WHICH DOES NOT HAVE VALID DIMENSIONS */ 
INSERT INTO dw.budgetforecast_fact_error
(
  RUNID,
  BUDGETFORECAST_ID,
  BUDGETFORECAST_NAME,
  FISCAL_MONTH_ID,
  FISCAL_WEEK_ID,
  CLASS_KEY,
  CLASS_ID,
  CLASS_ID_ERROR,
  TERRITORY_KEY,
  TERRITORY_ID,
  TERRITORY_ID_ERROR,
  SUBSIDIARY_KEY,
  SUBSIDIARY_ID,
  SUBSIDIARY_ID_ERROR,
  BUDGETFORECAST_TYPE,
  MONTH_END_DATE,
  MONTH_START_DATE,
  WEEK_START_DATE,
  WEEK_END_DATE,
  AMOUNT,
  IS_INACTIVE,
  CREATION_DATE,
  LAST_MODIFIED_DATE,
  RECORD_STATUS,
  DW_CREATION_DATE
)
SELECT A.RUNID,
       A.BUDGETFORECAST_ID,
       A.BUDGETFORECAST_NAME,
       A.FISCAL_MONTH_ID,
       A.FISCAL_WEEK_ID,
       B.CLASS_KEY,
       A.LINE_OF_BUSINESS_ID,
       CASE
         WHEN (B.CLASS_KEY IS NULL AND A.LINE_OF_BUSINESS_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (B.CLASS_KEY IS NULL AND A.LINE_OF_BUSINESS_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       C.TERRITORY_KEY,
       A.REGIONSALES_TERRITORY_ID,
       CASE
         WHEN (C.TERRITORY_KEY IS NULL AND A.REGIONSALES_TERRITORY_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (C.TERRITORY_KEY IS NULL AND A.REGIONSALES_TERRITORY_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       D.SUBSIDIARY_KEY,
       A.SUBSIDIARY_ID,
       CASE
         WHEN (D.SUBSIDIARY_KEY IS NULL AND A.SUBSIDIARY_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (D.SUBSIDIARY_KEY IS NULL AND A.SUBSIDIARY_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       BUDGETFORECAST_TYPE,
       MONTH_END_DATE,
       MONTH_START_DATE,
       WEEK_START_DATE,
       WEEK_END_DATE,
       AMOUNT,
       A.IS_INACTIVE,
       DATE_CREATED,
       LAST_MODIFIED_DATE,
       'ERROR' AS RECORD_STATUS,
       SYSDATE AS DW_CREATION_DATE
FROM dw_prestage.budgetforecast_fact_insert A
  LEFT OUTER JOIN DW_REPORT.CLASSES B ON (A.LINE_OF_BUSINESS_ID = B.CLASS_ID)
  LEFT OUTER JOIN DW_REPORT.territories C ON (A.REGIONSALES_TERRITORY_ID = C.TERRITORY_ID)
  LEFT OUTER JOIN DW_REPORT.SUBSIDIARIES D ON (A.SUBSIDIARY_ID = D.SUBSIDIARY_ID)
              WHERE (B.CLASS_KEY IS NULL
               OR C.TERRITORY_KEY IS NULL
               OR D.SUBSIDIARY_KEY IS NULL);

/* fact -> UPDATE THE OLD RECORDS SETTING THE CURRENT FLAG VALUE TO 0 */  
UPDATE DW.BUDGETFORECAST_FACT 
SET DW_CURRENT = 0,
DATE_ACTIVE_TO = (SYSDATE -1) 
WHERE DW_CURRENT = 1
AND   SYSDATE >= DATE_ACTIVE_FROM
AND   SYSDATE < DATE_ACTIVE_TO
AND   EXISTS 
	(SELECT 1 FROM DW_PRESTAGE.BUDGETFORECAST_FACT_UPDATE B,
	               DW_REPORT.SUBSIDIARIES C
	 WHERE DW.BUDGETFORECAST_FACT.BUDGETFORECAST_ID = B.BUDGETFORECAST_ID
	 AND DW.BUDGETFORECAST_FACT.SUBSIDIARY_KEY = C.SUBSIDIARY_KEY
	 AND B.SUBSIDIARY_ID = C.SUBSIDIARY_ID );

/* fact -> NOW INSERT THE FACT RECORDS WHICH HAVE BEEN UPDATED AT THE SOURCE */ 
INSERT INTO dw.budgetforecast_fact
(
  BUDGETFORECAST_ID   
 ,BUDGETFORECAST_NAME   
 ,FISCAL_MONTH_ID       
 ,FISCAL_WEEK_ID        
 ,CLASS_KEY             
 ,TERRITORY_KEY         
 ,SUBSIDIARY_KEY        
 ,BUDGETFORECAST_TYPE   
 ,MONTH_END_DATE        
 ,MONTH_START_DATE      
 ,WEEK_START_DATE       
 ,WEEK_END_DATE         
 ,AMOUNT                
 ,IS_INACTIVE           
 ,CREATION_DATE         
 ,LAST_MODIFIED_DATE    
 ,DATE_ACTIVE_FROM      
 ,DATE_ACTIVE_TO        
 ,DW_CURRENT            
  )  
SELECT 
  A.BUDGETFORECAST_ID   
 ,A.BUDGETFORECAST_NAME   
 ,A.FISCAL_MONTH_ID       
 ,A.FISCAL_WEEK_ID
 ,B.CLASS_KEY
 ,C.TERRITORY_KEY
 ,D.SUBSIDIARY_KEY        
 ,BUDGETFORECAST_TYPE   
 ,MONTH_END_DATE        
 ,MONTH_START_DATE      
 ,WEEK_START_DATE       
 ,WEEK_END_DATE         
 ,AMOUNT                
 ,A.IS_INACTIVE           
 ,DATE_CREATED         
 ,LAST_MODIFIED_DATE    
 ,SYSDATE AS DATE_ACTIVE_FROM
 ,'9999-12-31 11:59:59' AS DATE_ACTIVE_TO
 ,1 AS DW_CURRENT
 FROM
  dw_prestage.budgetforecast_fact_update A
  INNER JOIN DW_REPORT.CLASSES B ON (A.LINE_OF_BUSINESS_ID = B.CLASS_ID) 
  INNER JOIN DW_REPORT.territories C ON (A.REGIONSALES_TERRITORY_ID = C.TERRITORY_ID)
  INNER JOIN DW_REPORT.SUBSIDIARIES D ON (A.SUBSIDIARY_ID = D.SUBSIDIARY_ID);


/* fact -> INSERT UPDATED RECORDS IN ERROR TABLE WHICH DOES NOT HAVE VALID DIMENSIONS */ 
INSERT INTO dw.budgetforecast_fact_error
(
  RUNID,
  BUDGETFORECAST_ID,
  BUDGETFORECAST_NAME,
  FISCAL_MONTH_ID,
  FISCAL_WEEK_ID,
  CLASS_KEY,
  CLASS_ID,
  CLASS_ID_ERROR,
  TERRITORY_KEY,
  TERRITORY_ID,
  TERRITORY_ID_ERROR,
  SUBSIDIARY_KEY,
  SUBSIDIARY_ID,
  SUBSIDIARY_ID_ERROR,
  BUDGETFORECAST_TYPE,
  MONTH_END_DATE,
  MONTH_START_DATE,
  WEEK_START_DATE,
  WEEK_END_DATE,
  AMOUNT,
  IS_INACTIVE,
  CREATION_DATE,
  LAST_MODIFIED_DATE,
  RECORD_STATUS,
  DW_CREATION_DATE
)
SELECT A.RUNID,
       A.BUDGETFORECAST_ID,
       A.BUDGETFORECAST_NAME,
       A.FISCAL_MONTH_ID,
       A.FISCAL_WEEK_ID,
       B.CLASS_KEY,
       A.LINE_OF_BUSINESS_ID,
       CASE
         WHEN (B.CLASS_KEY IS NULL AND A.LINE_OF_BUSINESS_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (B.CLASS_KEY IS NULL AND A.LINE_OF_BUSINESS_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       C.TERRITORY_KEY,
       A.REGIONSALES_TERRITORY_ID,
       CASE
         WHEN (C.TERRITORY_KEY IS NULL AND A.REGIONSALES_TERRITORY_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (C.TERRITORY_KEY IS NULL AND A.REGIONSALES_TERRITORY_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       D.SUBSIDIARY_KEY,
       A.SUBSIDIARY_ID,
       CASE
         WHEN (D.SUBSIDIARY_KEY IS NULL AND A.SUBSIDIARY_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (D.SUBSIDIARY_KEY IS NULL AND A.SUBSIDIARY_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       BUDGETFORECAST_TYPE,
       MONTH_END_DATE,
       MONTH_START_DATE,
       WEEK_START_DATE,
       WEEK_END_DATE,
       AMOUNT,
       A.IS_INACTIVE,
       DATE_CREATED,
       LAST_MODIFIED_DATE,
       'ERROR' AS RECORD_STATUS,
       SYSDATE AS DW_CREATION_DATE
FROM dw_prestage.budgetforecast_fact_update A
  LEFT OUTER JOIN DW_REPORT.CLASSES B ON (A.LINE_OF_BUSINESS_ID = B.CLASS_ID)
  LEFT OUTER JOIN DW_REPORT.territories C ON (A.REGIONSALES_TERRITORY_ID = C.TERRITORY_ID)
  LEFT OUTER JOIN DW_REPORT.SUBSIDIARIES D ON (A.SUBSIDIARY_ID = D.SUBSIDIARY_ID)
              WHERE (B.CLASS_KEY IS NULL
               OR C.TERRITORY_KEY IS NULL
               OR D.SUBSIDIARY_KEY IS NULL);

COMMIT;