/* prestage - drop intermediate insert table */
DROP TABLE if exists dw_prestage.opportunity_fact_insert;

/* prestage - create intermediate insert table*/
CREATE TABLE dw_prestage.opportunity_fact_insert 
AS
SELECT *
FROM dw_prestage.opportunity_fact a
WHERE not exists ( select 1 from dw_stage.opportunity_fact b
where b.transaction_id = a.transaction_id
AND   a.subsidiary_id = b.subsidiary_id);

/* prestage - drop intermediate update table*/
DROP TABLE if exists dw_prestage.opportunity_fact_update;

/* prestage - create intermediate update table*/
CREATE TABLE dw_prestage.opportunity_fact_update 
AS
SELECT *
FROM dw_prestage.opportunity_fact a
WHERE
EXISTS
( 
SELECT 1 FROM
(
SELECT
 DOCUMENT_NUMBER
,TRANSACTION_NUMBER
,TRANSACTION_ID
,SALES_REP_ID
,TERRITORY_ID
,OPEN_DATE
,SHIP_DATE
,CLOSE_DATE
,RETURN_DATE
,FORECAST_TYPE
,ABCDO_MARKER_ID
,BOOK_FAIRS_STATUS_ID
,BOOK_FAIR_TYPE_ID
,TRUCK_ROUTE_ID
,INVOICE_OPTION_ID
,BILL_ADDRESS_LINE_1
,BILL_ADDRESS_LINE_2
,BILL_ADDRESS_LINE_3
,BILL_CITY
,BILL_COUNTRY
,BILL_STATE
,BILL_ZIP
,SHIP_ADDRESS_LINE_1
,SHIP_ADDRESS_LINE_2
,SHIP_ADDRESS_LINE_3
,SHIP_CITY
,SHIP_COUNTRY
,SHIP_STATE
,SHIP_ZIP
,STATUS
,CURRENCY_ID
,TRANDATE
,EXCHANGE_RATE
,ROLL_SIZE
,PROJECTED_TOTAL
,WEIGHTED_TOTAL
,LOCATION_ID
,SUBSIDIARY_ID
,ACCOUNTING_PERIOD_ID
,CUSTOMER_ID
,CUSTOM_FORM_ID
FROM
 dw_prestage.opportunity_fact A2
 WHERE NOT EXISTS ( select 1 from dw_prestage.opportunity_fact_insert B2
where B2.TRANSACTION_ID = A2.TRANSACTION_ID
     AND   A2.subsidiary_id = B2.subsidiary_id)
MINUS
SELECT
 DOCUMENT_NUMBER
,TRANSACTION_NUMBER
,TRANSACTION_ID
,SALES_REP_ID
,TERRITORY_ID
,OPEN_DATE
,SHIP_DATE
,CLOSE_DATE
,RETURN_DATE
,FORECAST_TYPE
,ABCDO_MARKER_ID
,BOOK_FAIRS_STATUS_ID
,BOOK_FAIR_TYPE_ID
,TRUCK_ROUTE_ID
,INVOICE_OPTION_ID
,BILL_ADDRESS_LINE_1
,BILL_ADDRESS_LINE_2
,BILL_ADDRESS_LINE_3
,BILL_CITY
,BILL_COUNTRY
,BILL_STATE
,BILL_ZIP
,SHIP_ADDRESS_LINE_1
,SHIP_ADDRESS_LINE_2
,SHIP_ADDRESS_LINE_3
,SHIP_CITY
,SHIP_COUNTRY
,SHIP_STATE
,SHIP_ZIP
,STATUS
,CURRENCY_ID
,TRANDATE
,EXCHANGE_RATE
,ROLL_SIZE
,PROJECTED_TOTAL
,WEIGHTED_TOTAL
,LOCATION_ID
,SUBSIDIARY_ID
,ACCOUNTING_PERIOD_ID
,CUSTOMER_ID
,CUSTOM_FORM_ID
FROM
 dw_stage.opportunity_fact a1
WHERE EXISTS ( select 1 from dw_prestage.opportunity_fact b1
where b1.TRANSACTION_ID = a1.TRANSACTION_ID
     AND   a1.subsidiary_id = b1.subsidiary_id)
AND NOT EXISTS ( select 1 from dw_prestage.opportunity_fact_insert c1
where c1.TRANSACTION_ID = a1.TRANSACTION_ID
     AND   a1.subsidiary_id = c1.subsidiary_id)
) b
where b.transaction_id = a.transaction_id) ;    

/* prestage - drop intermediate no change track table*/
DROP TABLE if exists dw_prestage.opportunity_fact_nochange;

/* prestage - create intermediate no change track table*/
CREATE TABLE dw_prestage.opportunity_fact_nochange 
AS
SELECT TRANSACTION_ID
FROM (SELECT TRANSACTION_ID
      FROM dw_prestage.opportunity_fact
      MINUS
      (SELECT TRANSACTION_ID
      FROM dw_prestage.opportunity_fact_insert
      UNION ALL
      SELECT TRANSACTION_ID
      FROM dw_prestage.opportunity_fact_update));

/* prestage-> no of opportunity fact records ingested in staging */
SELECT count(1) FROM dw_prestage.opportunity_fact;

/* prestage-> no of opportunity fact records identified to inserted  */
SELECT count(1) FROM dw_prestage.opportunity_fact_insert;

/* prestage-> no of opportunity fact records identified to updated */
SELECT count(1) FROM dw_prestage.opportunity_fact_update;

/* prestage-> no of opportunity fact records identified as no change */
SELECT count(1) FROM dw_prestage.opportunity_fact_nochange;

--D --A = B + C + D
/* stage -> delete from stage records to be updated */ 
DELETE
FROM dw_stage.opportunity_fact USING dw_prestage.opportunity_fact_update
WHERE dw_stage.opportunity_fact.transaction_id = dw_prestage.opportunity_fact_update.transaction_id
     AND dw_stage.opportunity_fact.subsidiary_id = dw_prestage.opportunity_fact_update.subsidiary_id;

/* stage -> insert into stage records which have been created */ 
INSERT INTO dw_stage.opportunity_fact
SELECT *
FROM dw_prestage.opportunity_fact_insert;

/* stage -> insert into stage records which have been updated */ 
INSERT INTO dw_stage.opportunity_fact
SELECT *
FROM dw_prestage.opportunity_fact
WHERE EXISTS (SELECT 1
              FROM dw_prestage.opportunity_fact_update
              WHERE dw_prestage.opportunity_fact_update.transaction_id = dw_prestage.opportunity_fact.transaction_id);

/* fact -> INSERT NEW RECORDS WHICH HAS ALL VALID DIMENSIONS */ 
INSERT INTO dw.opportunity_fact
(
  DOCUMENT_NUMBER
 ,TRANSACTION_NUMBER
 ,TRANSACTION_ID
 ,ACCOUNTING_PERIOD_KEY
 ,TERRITORY_KEY
 ,SALES_REP_KEY
 ,BOOK_FAIRS_KEY
 ,BILL_ADDRESS_LINE_1
 ,BILL_ADDRESS_LINE_2
 ,BILL_ADDRESS_LINE_3
 ,BILL_CITY
 ,BILL_COUNTRY
 ,BILL_STATE
 ,BILL_ZIP
 ,SHIP_ADDRESS_LINE_1
 ,SHIP_ADDRESS_LINE_2
 ,SHIP_ADDRESS_LINE_3
 ,SHIP_CITY
 ,SHIP_COUNTRY
 ,SHIP_STATE
 ,SHIP_ZIP
 ,OPPORTUNITY_STATUS_KEY
 ,OPPORTUNITY_TYPE_KEY
 ,FORECAST_TYPE
 ,CURRENCY_KEY
 ,TRANSACTION_DATE_KEY
 ,OPEN_DATE_KEY
 ,SHIP_DATE_KEY
 ,CLOSE_DATE_KEY
 ,RETURN_DATE_KEY
 ,EXCHANGE_RATE
 ,ROLL_SIZE
 ,PROJECTED_TOTAL
 ,WEIGHTED_TOTAL
 ,AMOUNT
 ,LOCATION_KEY
 ,CLASS_KEY
 ,SUBSIDIARY_KEY
 ,CUSTOMER_KEY
 ,LAST_MODIFIED_DATE
 ,DATE_ACTIVE_FROM
 ,DATE_ACTIVE_TO
 ,DW_CURRENT
)
SELECT A.DOCUMENT_NUMBER,
       A.TRANSACTION_NUMBER,
       A.TRANSACTION_ID,
       B.ACCOUNTING_PERIOD_KEY,
       C.TERRITORY_KEY,
       D.EMPLOYEE_KEY AS SALES_REP_KEY,
       E.BOOK_FAIR_KEY AS BOOK_FAIRS_KEY,
       A.BILL_ADDRESS_LINE_1,
       A.BILL_ADDRESS_LINE_2,
       A.BILL_ADDRESS_LINE_3,
       A.BILL_CITY,
       A.BILL_COUNTRY,
       A.BILL_STATE,
       A.BILL_ZIP,
       A.SHIP_ADDRESS_LINE_1,
       A.SHIP_ADDRESS_LINE_2,
       A.SHIP_ADDRESS_LINE_3,
       A.SHIP_CITY,
       A.SHIP_COUNTRY,
       A.SHIP_STATE,
       A.SHIP_ZIP,
       f.transaction_status_key AS OPPORTUNITY_STATUS_KEY,
       M.TRANSACTION_TYPE_KEY AS OPPORTUNITY_TYPE_KEY,
       A.FORECAST_TYPE,
       G.CURRENCY_KEY,
       H.DATE_KEY AS TRANSACTION_DATE_KEY,
       I.DATE_KEY AS OPEN_DATE_KEY,
       J.DATE_KEY AS SHIP_DATE_KEY,
       K.DATE_KEY AS CLOSE_DATE_KEY,
       L.DATE_KEY AS RETURN_DATE_KEY,
       A.EXCHANGE_RATE,
       A.ROLL_SIZE,
       A.PROJECTED_TOTAL,
       A.WEIGHTED_TOTAL,
       A.PROJECTED_TOTAL AS AMOUNT,
       N.LOCATION_KEY,
       O.CLASS_KEY,
       P.SUBSIDIARY_KEY,
       Q.CUSTOMER_KEY,
       A.DATE_LAST_MODIFIED,
       SYSDATE AS DATE_ACTIVE_FROM,
       '9999-12-31 11:59:59' AS DATE_ACTIVE_TO,
       1 AS DW_CURRENT
FROM dw_prestage.opportunity_fact_insert A
  INNER JOIN DW_REPORT.ACCOUNTING_PERIOD B ON (NVL (A.ACCOUNTING_PERIOD_ID,-99) = B.ACCOUNTING_PERIOD_ID)
  INNER JOIN DW_REPORT.TERRITORIES C ON (NVL (A.TERRITORY_ID,-99) = C.TERRITORY_ID)
  INNER JOIN DW_REPORT.EMPLOYEES D ON (NVL (A.SALES_REP_ID,-99) = D.EMPLOYEE_ID)
  INNER JOIN DW_REPORT.BOOK_FAIRS E
          ON (NVL (A.ABCDO_MARKER_ID,-99) = E.MARKER_ID
         AND NVL (A.BOOK_FAIRS_STATUS_ID,-99) = E.FAIR_STATUS_ID
         AND NVL (A.BOOK_FAIR_TYPE_ID,-99) = E.FAIR_TYPE_ID
         AND NVL (A.TRUCK_ROUTE_ID,-99) = E.ROUTE_ID
         AND NVL (A.INVOICE_OPTION_ID,-99) = E.INVOICE_OPTION_ID)
  INNER JOIN DW_REPORT.TRANSACTION_STATUS F
          ON (F.DOCUMENT_TYPE = 'Opportunity'
         AND NVL (F.STATUS,'NA_GDW') = A.STATUS)
  INNER JOIN DW_REPORT.CURRENCIES G ON (NVL (A.CURRENCY_ID,-99) = G.CURRENCY_ID)
  INNER JOIN DW.DWDATE H ON (TO_CHAR (A.TRANDATE,'YYYYMMDD') = H.DATE_ID)
  INNER JOIN DW.DWDATE I ON (TO_CHAR (A.OPEN_DATE,'YYYYMMDD') = I.DATE_ID)
  INNER JOIN DW.DWDATE J ON (TO_CHAR (A.SHIP_DATE,'YYYYMMDD') = J.DATE_ID)
  INNER JOIN DW.DWDATE K ON (TO_CHAR (A.CLOSE_DATE,'YYYYMMDD') = K.DATE_ID)
  INNER JOIN DW.DWDATE L ON (TO_CHAR (A.RETURN_DATE,'YYYYMMDD') = L.DATE_ID)
  INNER JOIN DW_REPORT.TRANSACTION_TYPE M ON (A.CUSTOM_FORM_ID = M.TRANSACTION_TYPE_ID)
  INNER JOIN DW_REPORT.LOCATIONS N ON (NVL(A.LOCATION_ID,-99) = N.LOCATION_ID)
  INNER JOIN DW_REPORT.CLASSES O ON (NVL(A.CLASS_ID,-99) = O.CLASS_ID)
  INNER JOIN DW_REPORT.SUBSIDIARIES P ON (A.SUBSIDIARY_ID = P.SUBSIDIARY_ID)
  INNER JOIN DW_REPORT.CUSTOMERS Q ON (A.CUSTOMER_ID = Q.CUSTOMER_ID);

  
/* fact -> INSERT NEW RECORDS IN ERROR TABLE WHICH DOES NOT HAVE VALID DIMENSIONS */ 
INSERT INTO dw.opportunity_fact_error
(
  RUNID
 ,DOCUMENT_NUMBER
 ,TRANSACTION_NUMBER
 ,TRANSACTION_ID
 ,ACCOUNTING_PERIOD_KEY
 ,ACCOUNTING_PERIOD_ID_ERROR
 ,TERRITORY_KEY
 ,TERRITORY_ID_ERROR
 ,SALES_REP_KEY
 ,SALES_REP_ID_ERROR
 ,BOOK_FAIRS_KEY
 ,BOOK_FAIRS_ID_ERROR
 ,BILL_ADDRESS_LINE_1
 ,BILL_ADDRESS_LINE_2
 ,BILL_ADDRESS_LINE_3
 ,BILL_CITY
 ,BILL_COUNTRY
 ,BILL_STATE
 ,BILL_ZIP
 ,SHIP_ADDRESS_LINE_1
 ,SHIP_ADDRESS_LINE_2
 ,SHIP_ADDRESS_LINE_3
 ,SHIP_CITY
 ,SHIP_COUNTRY
 ,SHIP_STATE
 ,SHIP_ZIP
 ,OPPORTUNITY_STATUS_KEY
 ,OPPORTUNITY_STATUS_ID_ERROR
 ,OPPORTUNITY_TYPE_KEY
 ,OPPORTUNITY_TYPE_ID_ERROR
 ,FORECAST_TYPE
 ,CURRENCY_KEY
 ,CURRENCY_ID_ERROR
 ,TRANSACTION_DATE_KEY
 ,OPEN_DATE_KEY
 ,OPEN_DATE_ERROR
 ,SHIP_DATE_KEY
 ,SHIP_DATE_ERROR
 ,CLOSE_DATE_KEY
 ,CLOSE_DATE_ERROR
 ,RETURN_DATE_KEY
 ,RETURN_DATE_ERROR
 ,EXCHANGE_RATE
 ,ROLL_SIZE
 ,PROJECTED_TOTAL
 ,WEIGHTED_TOTAL
 ,AMOUNT
 ,LOCATION_KEY
 ,LOCATION_ID_ERROR
 ,CLASS_KEY
 ,CLASS_ID_ERROR
 ,SUBSIDIARY_KEY
 ,SUBSIDIARY_ID_ERROR
 ,CUSTOMER_KEY
 ,CUSTOMER_ID_ERROR
 ,LAST_MODIFIED_DATE
 ,SALES_REP_ID         
 ,TERRITORY_ID         
 ,OPEN_DATE            
 ,SHIP_DATE            
 ,CLOSE_DATE           
 ,RETURN_DATE          
 ,ACCOUNTING_PERIOD_ID 
 ,ABCDO_MARKER_ID      
 ,BOOK_FAIRS_STATUS_ID 
 ,BOOK_FAIR_TYPE_ID    
 ,TRUCK_ROUTE_ID       
 ,STATUS               
 ,CUSTOM_FORM_ID       
 ,CURRENCY_ID          
 ,TRANDATE             
 ,LOCATION_ID          
 ,CUSTOMER_ID 
 ,CLASS_ID 
 ,SUBSIDIARY_ID
 ,INVOICE_OPTION_ID        
 ,RECORD_STATUS        
 ,DW_CREATION_DATE     
)
SELECT A.RUNID,
       A.DOCUMENT_NUMBER,
       A.TRANSACTION_NUMBER,
       A.TRANSACTION_ID,
       B.ACCOUNTING_PERIOD_KEY,
       CASE
         WHEN (B.ACCOUNTING_PERIOD_KEY IS NULL AND A.ACCOUNTING_PERIOD_id IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (B.ACCOUNTING_PERIOD_KEY IS NULL AND A.ACCOUNTING_PERIOD_id IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       C.TERRITORY_KEY,
       CASE
         WHEN (C.TERRITORY_KEY IS NULL AND A.TERRITORY_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (C.TERRITORY_KEY IS NULL AND A.TERRITORY_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       D.EMPLOYEE_KEY AS SALES_REP_KEY,
       CASE
         WHEN (D.EMPLOYEE_KEY IS NULL AND A.SALES_REP_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (D.EMPLOYEE_KEY IS NULL AND A.SALES_REP_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       E.BOOK_FAIR_KEY AS BOOK_FAIRS_KEY,
       CASE
         WHEN (E.BOOK_FAIR_KEY IS NULL AND A.ABCDO_MARKER_ID IS NOT NULL
                                       AND A.BOOK_FAIRS_STATUS_ID IS NOT NULL
                                       AND A.BOOK_FAIR_TYPE_ID IS NOT NULL
                                       AND A.TRUCK_ROUTE_ID IS NOT NULL
                                       AND A.INVOICE_OPTION_ID IS NOT NULL ) THEN ' DIM LOOKUP FAILED '
         WHEN (E.BOOK_FAIR_KEY IS NULL AND (A.SALES_REP_ID IS NULL
                                       OR A.BOOK_FAIRS_STATUS_ID IS NULL
                                       OR A.BOOK_FAIR_TYPE_ID IS  NULL
                                       OR A.TRUCK_ROUTE_ID IS NULL
                                       OR A.INVOICE_OPTION_ID IS NULL) 
                                       ) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       A.BILL_ADDRESS_LINE_1,
       A.BILL_ADDRESS_LINE_2,
       A.BILL_ADDRESS_LINE_3,
       A.BILL_CITY,
       A.BILL_COUNTRY,
       A.BILL_STATE,
       A.BILL_ZIP,
       A.SHIP_ADDRESS_LINE_1,
       A.SHIP_ADDRESS_LINE_2,
       A.SHIP_ADDRESS_LINE_3,
       A.SHIP_CITY,
       A.SHIP_COUNTRY,
       A.SHIP_STATE,
       A.SHIP_ZIP,
       f.transaction_status_key AS OPPORTUNITY_STATUS_KEY,
       CASE
         WHEN (f.transaction_status_key IS NULL AND A.STATUS IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (f.transaction_status_key IS NULL AND A.STATUS IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       M.TRANSACTION_TYPE_KEY AS OPPORTUNITY_TYPE_KEY,
       CASE
         WHEN (M.TRANSACTION_TYPE_KEY IS NULL AND A.CUSTOM_FORM_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (M.TRANSACTION_TYPE_KEY IS NULL AND A.CUSTOM_FORM_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       A.FORECAST_TYPE,
       G.CURRENCY_KEY,
       CASE
         WHEN (G.CURRENCY_KEY IS NULL AND A.CURRENCY_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (G.CURRENCY_KEY IS NULL AND A.CURRENCY_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       H.DATE_KEY AS TRANSACTION_DATE_KEY,
       I.DATE_KEY AS OPEN_DATE_KEY,
       CASE
         WHEN (I.DATE_KEY IS NULL AND A.OPEN_DATE IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (I.DATE_KEY IS NULL AND A.OPEN_DATE IS NULL) THEN ' NO MANDATORY DIM FROM SOURCE '
         ELSE 'OK'
       END,
       J.DATE_KEY AS SHIP_DATE_KEY,
       CASE
         WHEN (J.DATE_KEY IS NULL AND A.SHIP_DATE IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (J.DATE_KEY IS NULL AND A.SHIP_DATE IS NULL) THEN ' NO MANDATORY DIM FROM SOURCE '
         ELSE 'OK'
       END,
       K.DATE_KEY AS CLOSE_DATE_KEY,
       CASE
         WHEN (K.DATE_KEY IS NULL AND A.CLOSE_DATE IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (K.DATE_KEY IS NULL AND A.CLOSE_DATE IS NULL) THEN ' NO MANDATORY DIM FROM SOURCE '
         ELSE 'OK'
       END,
       L.DATE_KEY AS RETURN_DATE_KEY,
       CASE
         WHEN (L.DATE_KEY IS NULL AND A.RETURN_DATE IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (L.DATE_KEY IS NULL AND A.RETURN_DATE IS NULL) THEN ' NO MANDATORY DIM FROM SOURCE '
         ELSE 'OK'
       END,
       A.EXCHANGE_RATE,
       A.ROLL_SIZE,
       A.PROJECTED_TOTAL,
       A.WEIGHTED_TOTAL,
       A.PROJECTED_TOTAL AS AMOUNT,
       N.LOCATION_KEY,
       CASE
         WHEN (N.LOCATION_KEY IS NULL AND A.LOCATION_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (N.LOCATION_KEY IS NULL AND A.LOCATION_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       O.CLASS_KEY,
       CASE
         WHEN (O.CLASS_KEY IS NULL AND A.CLASS_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (O.CLASS_KEY IS NULL AND A.CLASS_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       P.SUBSIDIARY_KEY,
       CASE
         WHEN (P.SUBSIDIARY_KEY IS NULL AND A.SUBSIDIARY_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (P.SUBSIDIARY_KEY IS NULL AND A.SUBSIDIARY_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       Q.CUSTOMER_KEY,
       CASE
         WHEN (Q.CUSTOMER_KEY IS NULL AND A.CUSTOMER_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (Q.CUSTOMER_KEY IS NULL AND A.CUSTOMER_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       A.DATE_LAST_MODIFIED,
       A.SALES_REP_ID,         
       A.TERRITORY_ID,         
       A.OPEN_DATE,            
       A.SHIP_DATE,            
       A.CLOSE_DATE,           
       A.RETURN_DATE,          
       A.ACCOUNTING_PERIOD_ID, 
       A.ABCDO_MARKER_ID,      
       A.BOOK_FAIRS_STATUS_ID, 
       A.BOOK_FAIR_TYPE_ID,    
       A.TRUCK_ROUTE_ID,       
       A.STATUS,               
       A.CUSTOM_FORM_ID,       
       A.CURRENCY_ID,          
       A.TRANDATE,             
       A.LOCATION_ID,          
       A.CUSTOMER_ID,
       A.CLASS_ID,
       A.SUBSIDIARY_ID,
       A.INVOICE_OPTION_ID, 
       'ERROR' AS RECORD_STATUS,
       SYSDATE AS DW_CREATION_DATE	   
FROM dw_prestage.opportunity_fact_insert A
  LEFT OUTER JOIN DW_REPORT.ACCOUNTING_PERIOD B ON (A.ACCOUNTING_PERIOD_ID = B.ACCOUNTING_PERIOD_ID)
  LEFT OUTER JOIN DW_REPORT.TERRITORIES C ON (A.TERRITORY_ID = C.TERRITORY_ID)
  LEFT OUTER JOIN DW_REPORT.EMPLOYEES D ON (A.SALES_REP_ID = D.EMPLOYEE_ID)
  LEFT OUTER JOIN DW_REPORT.BOOK_FAIRS E
          ON (NVL (A.ABCDO_MARKER_ID,-99) = E.MARKER_ID
         AND NVL (A.BOOK_FAIRS_STATUS_ID,-99) = E.FAIR_STATUS_ID
         AND NVL (A.BOOK_FAIR_TYPE_ID,-99) = E.FAIR_TYPE_ID
         AND NVL (A.TRUCK_ROUTE_ID,-99) = E.ROUTE_ID
         AND NVL (A.INVOICE_OPTION_ID,-99) = E.INVOICE_OPTION_ID)
  LEFT OUTER JOIN DW_REPORT.TRANSACTION_STATUS F
          ON (F.DOCUMENT_TYPE = 'Opportunity'
         AND NVL (F.STATUS,'NA_GDW') = A.STATUS)
  LEFT OUTER JOIN DW_REPORT.CURRENCIES G ON (A.CURRENCY_ID = G.CURRENCY_ID)
  LEFT OUTER JOIN DW.DWDATE H ON (TO_CHAR (A.TRANDATE,'YYYYMMDD') = H.DATE_ID)
  LEFT OUTER JOIN DW.DWDATE I ON (TO_CHAR (A.OPEN_DATE,'YYYYMMDD') = I.DATE_ID)
  LEFT OUTER JOIN DW.DWDATE J ON (TO_CHAR (A.SHIP_DATE,'YYYYMMDD') = J.DATE_ID)
  LEFT OUTER JOIN DW.DWDATE K ON (TO_CHAR (A.CLOSE_DATE,'YYYYMMDD') = K.DATE_ID)
  LEFT OUTER JOIN DW.DWDATE L ON (TO_CHAR (A.RETURN_DATE,'YYYYMMDD') = L.DATE_ID)
  LEFT OUTER JOIN DW_REPORT.TRANSACTION_TYPE M ON (NVL (A.CUSTOM_FORM_ID,-99) = M.TRANSACTION_TYPE_ID)
  LEFT OUTER JOIN DW_REPORT.LOCATIONS N ON (NVL (A.LOCATION_ID,-99) = N.LOCATION_ID)
  LEFT OUTER JOIN DW_REPORT.CLASSES O ON (A.CLASS_ID = O.CLASS_ID)
  LEFT OUTER JOIN DW_REPORT.SUBSIDIARIES P ON (A.SUBSIDIARY_ID = P.SUBSIDIARY_ID)
  LEFT OUTER JOIN DW_REPORT.CUSTOMERS Q ON (A.CUSTOMER_ID = Q.CUSTOMER_ID) 
  WHERE 
  ((B.ACCOUNTING_PERIOD_KEY IS NULL AND A.ACCOUNTING_PERIOD_ID IS NOT NULL ) OR
  (C.TERRITORY_KEY IS NULL AND A.TERRITORY_ID IS NOT NULL ) OR
  (D.EMPLOYEE_KEY IS NULL AND A.SALES_REP_ID IS NOT NULL ) OR
  E.BOOK_FAIR_KEY IS NULL OR
  F.TRANSACTION_STATUS_KEY IS NULL OR
  (G.CURRENCY_KEY IS NULL AND A.CURRENCY_ID IS NOT NULL ) OR
  H.DATE_KEY IS NULL OR
  I.DATE_KEY IS NULL OR
  J.DATE_KEY IS NULL OR
  K.DATE_KEY IS NULL OR
  L.DATE_KEY IS NULL OR
  M.TRANSACTION_TYPE_KEY IS NULL OR
  (N.LOCATION_KEY IS NULL AND A.LOCATION_ID IS NOT NULL ) OR
  (O.CLASS_KEY IS NULL AND A.CLASS_ID IS NOT NULL ) OR
  P.SUBSIDIARY_KEY IS NULL OR
  Q.CUSTOMER_KEY IS NULL );

/* fact -> UPDATE THE OLD RECORDS SETTING THE CURRENT FLAG VALUE TO 0 */  
UPDATE dw.opportunity_fact SET dw_current = 0,DATE_ACTIVE_TO = (sysdate -1) WHERE dw_current = 1
AND   sysdate>= date_active_from
AND   sysdate< date_active_to
AND   EXISTS (SELECT 1 FROM dw_prestage.opportunity_fact_update 
WHERE dw.opportunity_fact.transaction_id = dw_prestage.opportunity_fact_update.transaction_id);

/* fact -> NOW INSERT THE FACT RECORDS WHICH HAVE BEEN UPDATED AT THE SOURCE */ 
INSERT INTO dw.opportunity_fact
(
  DOCUMENT_NUMBER
 ,TRANSACTION_NUMBER
 ,TRANSACTION_ID
 ,ACCOUNTING_PERIOD_KEY
 ,TERRITORY_KEY
 ,SALES_REP_KEY
 ,BOOK_FAIRS_KEY
 ,BILL_ADDRESS_LINE_1
 ,BILL_ADDRESS_LINE_2
 ,BILL_ADDRESS_LINE_3
 ,BILL_CITY
 ,BILL_COUNTRY
 ,BILL_STATE
 ,BILL_ZIP
 ,SHIP_ADDRESS_LINE_1
 ,SHIP_ADDRESS_LINE_2
 ,SHIP_ADDRESS_LINE_3
 ,SHIP_CITY
 ,SHIP_COUNTRY
 ,SHIP_STATE
 ,SHIP_ZIP
 ,OPPORTUNITY_STATUS_KEY
 ,OPPORTUNITY_TYPE_KEY
 ,FORECAST_TYPE
 ,CURRENCY_KEY
 ,TRANSACTION_DATE_KEY
 ,OPEN_DATE_KEY
 ,SHIP_DATE_KEY
 ,CLOSE_DATE_KEY
 ,RETURN_DATE_KEY
 ,EXCHANGE_RATE
 ,ROLL_SIZE
 ,PROJECTED_TOTAL
 ,WEIGHTED_TOTAL
 ,AMOUNT
 ,LOCATION_KEY
 ,CLASS_KEY
 ,SUBSIDIARY_KEY
 ,CUSTOMER_KEY
 ,LAST_MODIFIED_DATE
 ,DATE_ACTIVE_FROM
 ,DATE_ACTIVE_TO
 ,DW_CURRENT
)
SELECT A.DOCUMENT_NUMBER,
       A.TRANSACTION_NUMBER,
       A.TRANSACTION_ID,
       B.ACCOUNTING_PERIOD_KEY,
       C.TERRITORY_KEY,
       D.EMPLOYEE_KEY AS SALES_REP_KEY,
       E.BOOK_FAIR_KEY AS BOOK_FAIRS_KEY,
       A.BILL_ADDRESS_LINE_1,
       A.BILL_ADDRESS_LINE_2,
       A.BILL_ADDRESS_LINE_3,
       A.BILL_CITY,
       A.BILL_COUNTRY,
       A.BILL_STATE,
       A.BILL_ZIP,
       A.SHIP_ADDRESS_LINE_1,
       A.SHIP_ADDRESS_LINE_2,
       A.SHIP_ADDRESS_LINE_3,
       A.SHIP_CITY,
       A.SHIP_COUNTRY,
       A.SHIP_STATE,
       A.SHIP_ZIP,
       f.transaction_status_key AS OPPORTUNITY_STATUS_KEY,
       M.TRANSACTION_TYPE_KEY AS OPPORTUNITY_TYPE_KEY,
       A.FORECAST_TYPE,
       G.CURRENCY_KEY,
       H.DATE_KEY AS TRANSACTION_DATE_KEY,
       I.DATE_KEY AS OPEN_DATE_KEY,
       J.DATE_KEY AS SHIP_DATE_KEY,
       K.DATE_KEY AS CLOSE_DATE_KEY,
       L.DATE_KEY AS RETURN_DATE_KEY,
       A.EXCHANGE_RATE,
       A.ROLL_SIZE,
       A.PROJECTED_TOTAL,
       A.WEIGHTED_TOTAL,
       A.PROJECTED_TOTAL AS AMOUNT,
       N.LOCATION_KEY,
       O.CLASS_KEY,
       P.SUBSIDIARY_KEY,
       Q.CUSTOMER_KEY,
       A.DATE_LAST_MODIFIED,
       SYSDATE AS DATE_ACTIVE_FROM,
       '9999-12-31 11:59:59' AS DATE_ACTIVE_TO,
       1 AS DW_CURRENT
FROM dw_prestage.opportunity_fact_update A
  INNER JOIN DW_REPORT.ACCOUNTING_PERIOD B ON (NVL (A.ACCOUNTING_PERIOD_ID,-99) = B.ACCOUNTING_PERIOD_ID)
  INNER JOIN DW_REPORT.TERRITORIES C ON (NVL (A.TERRITORY_ID,-99) = C.TERRITORY_ID)
  INNER JOIN DW_REPORT.EMPLOYEES D ON (NVL (A.SALES_REP_ID,-99) = D.EMPLOYEE_ID)
  INNER JOIN DW_REPORT.BOOK_FAIRS E
          ON (NVL (A.ABCDO_MARKER_ID,-99) = E.MARKER_ID
         AND NVL (A.BOOK_FAIRS_STATUS_ID,-99) = E.FAIR_STATUS_ID
         AND NVL (A.BOOK_FAIR_TYPE_ID,-99) = E.FAIR_TYPE_ID
         AND NVL (A.TRUCK_ROUTE_ID,-99) = E.ROUTE_ID
         AND NVL (A.INVOICE_OPTION_ID,-99) = E.INVOICE_OPTION_ID)
  INNER JOIN DW_REPORT.TRANSACTION_STATUS F
          ON (F.DOCUMENT_TYPE = 'Opportunity'
         AND NVL (F.STATUS,'NA_GDW') = A.STATUS)
  INNER JOIN DW_REPORT.CURRENCIES G ON (NVL (A.CURRENCY_ID,-99) = G.CURRENCY_ID)
  INNER JOIN DW.DWDATE H ON (TO_CHAR (A.TRANDATE,'YYYYMMDD') = H.DATE_ID)
  INNER JOIN DW.DWDATE I ON (TO_CHAR (A.OPEN_DATE,'YYYYMMDD') = I.DATE_ID)
  INNER JOIN DW.DWDATE J ON (TO_CHAR (A.SHIP_DATE,'YYYYMMDD') = J.DATE_ID)
  INNER JOIN DW.DWDATE K ON (TO_CHAR (A.CLOSE_DATE,'YYYYMMDD') = K.DATE_ID)
  INNER JOIN DW.DWDATE L ON (TO_CHAR (A.RETURN_DATE,'YYYYMMDD') = L.DATE_ID)
  INNER JOIN DW_REPORT.TRANSACTION_TYPE M ON (A.CUSTOM_FORM_ID = M.TRANSACTION_TYPE_ID)
  INNER JOIN DW_REPORT.LOCATIONS N ON (NVL (A.LOCATION_ID,-99) = N.LOCATION_ID)
  INNER JOIN DW_REPORT.CLASSES O ON ( NVL(A.CLASS_ID,-99) = O.CLASS_ID)
  INNER JOIN DW_REPORT.SUBSIDIARIES P ON (A.SUBSIDIARY_ID = P.SUBSIDIARY_ID)
  INNER JOIN DW_REPORT.CUSTOMERS Q ON (A.CUSTOMER_ID = Q.CUSTOMER_ID);

/* fact -> INSERT UPDATED RECORDS IN ERROR TABLE WHICH DOES NOT HAVE VALID DIMENSIONS */ 
INSERT INTO dw.opportunity_fact_error
(
  RUNID
 ,DOCUMENT_NUMBER
 ,TRANSACTION_NUMBER
 ,TRANSACTION_ID
 ,ACCOUNTING_PERIOD_KEY
 ,ACCOUNTING_PERIOD_ID_ERROR
 ,TERRITORY_KEY
 ,TERRITORY_ID_ERROR
 ,SALES_REP_KEY
 ,SALES_REP_ID_ERROR
 ,BOOK_FAIRS_KEY
 ,BOOK_FAIRS_ID_ERROR
 ,BILL_ADDRESS_LINE_1
 ,BILL_ADDRESS_LINE_2
 ,BILL_ADDRESS_LINE_3
 ,BILL_CITY
 ,BILL_COUNTRY
 ,BILL_STATE
 ,BILL_ZIP
 ,SHIP_ADDRESS_LINE_1
 ,SHIP_ADDRESS_LINE_2
 ,SHIP_ADDRESS_LINE_3
 ,SHIP_CITY
 ,SHIP_COUNTRY
 ,SHIP_STATE
 ,SHIP_ZIP
 ,OPPORTUNITY_STATUS_KEY
 ,OPPORTUNITY_STATUS_ID_ERROR
 ,OPPORTUNITY_TYPE_KEY
 ,OPPORTUNITY_TYPE_ID_ERROR
 ,FORECAST_TYPE
 ,CURRENCY_KEY
 ,CURRENCY_ID_ERROR
 ,TRANSACTION_DATE_KEY
 ,OPEN_DATE_KEY
 ,OPEN_DATE_ERROR
 ,SHIP_DATE_KEY
 ,SHIP_DATE_ERROR
 ,CLOSE_DATE_KEY
 ,CLOSE_DATE_ERROR
 ,RETURN_DATE_KEY
 ,RETURN_DATE_ERROR
 ,EXCHANGE_RATE
 ,ROLL_SIZE
 ,PROJECTED_TOTAL
 ,WEIGHTED_TOTAL
 ,AMOUNT
 ,LOCATION_KEY
 ,LOCATION_ID_ERROR
 ,CLASS_KEY
 ,CLASS_ID_ERROR
 ,SUBSIDIARY_KEY
 ,SUBSIDIARY_ID_ERROR
 ,CUSTOMER_KEY
 ,CUSTOMER_ID_ERROR
 ,LAST_MODIFIED_DATE
 ,SALES_REP_ID         
 ,TERRITORY_ID         
 ,OPEN_DATE            
 ,SHIP_DATE            
 ,CLOSE_DATE           
 ,RETURN_DATE          
 ,ACCOUNTING_PERIOD_ID 
 ,ABCDO_MARKER_ID      
 ,BOOK_FAIRS_STATUS_ID 
 ,BOOK_FAIR_TYPE_ID    
 ,TRUCK_ROUTE_ID       
 ,STATUS               
 ,CUSTOM_FORM_ID       
 ,CURRENCY_ID          
 ,TRANDATE             
 ,LOCATION_ID          
 ,CUSTOMER_ID  
 ,CLASS_ID 
 ,SUBSIDIARY_ID
 ,INVOICE_OPTION_ID        
 ,RECORD_STATUS        
 ,DW_CREATION_DATE     
)
SELECT A.RUNID,
       A.DOCUMENT_NUMBER,
       A.TRANSACTION_NUMBER,
       A.TRANSACTION_ID,
       B.ACCOUNTING_PERIOD_KEY,
       CASE
         WHEN (B.ACCOUNTING_PERIOD_KEY IS NULL AND A.ACCOUNTING_PERIOD_id IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (B.ACCOUNTING_PERIOD_KEY IS NULL AND A.ACCOUNTING_PERIOD_id IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       C.TERRITORY_KEY,
       CASE
         WHEN (C.TERRITORY_KEY IS NULL AND A.TERRITORY_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (C.TERRITORY_KEY IS NULL AND A.TERRITORY_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       D.EMPLOYEE_KEY AS SALES_REP_KEY,
       CASE
         WHEN (D.EMPLOYEE_KEY IS NULL AND A.SALES_REP_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (D.EMPLOYEE_KEY IS NULL AND A.SALES_REP_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       E.BOOK_FAIR_KEY AS BOOK_FAIRS_KEY,
       CASE
         WHEN (E.BOOK_FAIR_KEY IS NULL AND A.ABCDO_MARKER_ID IS NOT NULL
                                       AND A.BOOK_FAIRS_STATUS_ID IS NOT NULL
                                       AND A.BOOK_FAIR_TYPE_ID IS NOT NULL
                                       AND A.TRUCK_ROUTE_ID IS NOT NULL
                                       AND A.INVOICE_OPTION_ID IS NOT NULL ) THEN ' DIM LOOKUP FAILED '
         WHEN (E.BOOK_FAIR_KEY IS NULL AND (A.SALES_REP_ID IS NULL
                                       OR A.BOOK_FAIRS_STATUS_ID IS NULL
                                       OR A.BOOK_FAIR_TYPE_ID IS  NULL
                                       OR A.TRUCK_ROUTE_ID IS NULL
                                       OR A.INVOICE_OPTION_ID IS NULL) 
                                       ) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       A.BILL_ADDRESS_LINE_1,
       A.BILL_ADDRESS_LINE_2,
       A.BILL_ADDRESS_LINE_3,
       A.BILL_CITY,
       A.BILL_COUNTRY,
       A.BILL_STATE,
       A.BILL_ZIP,
       A.SHIP_ADDRESS_LINE_1,
       A.SHIP_ADDRESS_LINE_2,
       A.SHIP_ADDRESS_LINE_3,
       A.SHIP_CITY,
       A.SHIP_COUNTRY,
       A.SHIP_STATE,
       A.SHIP_ZIP,
       f.transaction_status_key AS OPPORTUNITY_STATUS_KEY,
       CASE
         WHEN (f.transaction_status_key IS NULL AND A.STATUS IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (f.transaction_status_key IS NULL AND A.STATUS IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       M.TRANSACTION_TYPE_KEY AS OPPORTUNITY_TYPE_KEY,
       CASE
         WHEN (M.TRANSACTION_TYPE_KEY IS NULL AND A.CUSTOM_FORM_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (M.TRANSACTION_TYPE_KEY IS NULL AND A.CUSTOM_FORM_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       A.FORECAST_TYPE,
       G.CURRENCY_KEY,
       CASE
         WHEN (G.CURRENCY_KEY IS NULL AND A.CURRENCY_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (G.CURRENCY_KEY IS NULL AND A.CURRENCY_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       H.DATE_KEY AS TRANSACTION_DATE_KEY,
       I.DATE_KEY AS OPEN_DATE_KEY,
       CASE
         WHEN (I.DATE_KEY IS NULL AND A.OPEN_DATE IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (I.DATE_KEY IS NULL AND A.OPEN_DATE IS NULL) THEN ' NO MANDATORY DIM FROM SOURCE '
         ELSE 'OK'
       END,
       J.DATE_KEY AS SHIP_DATE_KEY,
       CASE
         WHEN (J.DATE_KEY IS NULL AND A.SHIP_DATE IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (J.DATE_KEY IS NULL AND A.SHIP_DATE IS NULL) THEN ' NO MANDATORY DIM FROM SOURCE '
         ELSE 'OK'
       END,
       K.DATE_KEY AS CLOSE_DATE_KEY,
       CASE
         WHEN (K.DATE_KEY IS NULL AND A.CLOSE_DATE IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (K.DATE_KEY IS NULL AND A.CLOSE_DATE IS NULL) THEN ' NO MANDATORY DIM FROM SOURCE '
         ELSE 'OK'
       END,
       L.DATE_KEY AS RETURN_DATE_KEY,
       CASE
         WHEN (L.DATE_KEY IS NULL AND A.RETURN_DATE IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (L.DATE_KEY IS NULL AND A.RETURN_DATE IS NULL) THEN ' NO MANDATORY DIM FROM SOURCE '
         ELSE 'OK'
       END,
       A.EXCHANGE_RATE,
       A.ROLL_SIZE,
       A.PROJECTED_TOTAL,
       A.WEIGHTED_TOTAL,
       A.PROJECTED_TOTAL AS AMOUNT,
       N.LOCATION_KEY,
       CASE
         WHEN (N.LOCATION_KEY IS NULL AND A.LOCATION_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (N.LOCATION_KEY IS NULL AND A.LOCATION_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       O.CLASS_KEY,
       CASE
         WHEN (O.CLASS_KEY IS NULL AND A.CLASS_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (O.CLASS_KEY IS NULL AND A.CLASS_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       P.SUBSIDIARY_KEY,
       CASE
         WHEN (P.SUBSIDIARY_KEY IS NULL AND A.SUBSIDIARY_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (P.SUBSIDIARY_KEY IS NULL AND A.SUBSIDIARY_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       Q.CUSTOMER_KEY,
       CASE
         WHEN (Q.CUSTOMER_KEY IS NULL AND A.CUSTOMER_ID IS NOT NULL) THEN ' DIM LOOKUP FAILED '
         WHEN (Q.CUSTOMER_KEY IS NULL AND A.CUSTOMER_ID IS NULL) THEN ' NO DIM FROM SOURCE '
         ELSE 'OK'
       END,
       A.DATE_LAST_MODIFIED,
       A.SALES_REP_ID,         
       A.TERRITORY_ID,         
       A.OPEN_DATE,            
       A.SHIP_DATE,            
       A.CLOSE_DATE,           
       A.RETURN_DATE,          
       A.ACCOUNTING_PERIOD_ID, 
       A.ABCDO_MARKER_ID,      
       A.BOOK_FAIRS_STATUS_ID, 
       A.BOOK_FAIR_TYPE_ID,    
       A.TRUCK_ROUTE_ID,       
       A.STATUS,               
       A.CUSTOM_FORM_ID,       
       A.CURRENCY_ID,          
       A.TRANDATE,             
       A.LOCATION_ID,          
       A.CUSTOMER_ID,
       A.CLASS_ID,
       A.SUBSIDIARY_ID,
       A.INVOICE_OPTION_ID, 
       'ERROR' AS RECORD_STATUS,
       SYSDATE AS DW_CREATION_DATE	   	   
FROM dw_prestage.opportunity_fact_update A
  LEFT OUTER JOIN DW_REPORT.ACCOUNTING_PERIOD B ON (A.ACCOUNTING_PERIOD_ID = B.ACCOUNTING_PERIOD_ID)
  LEFT OUTER JOIN DW_REPORT.TERRITORIES C ON (A.TERRITORY_ID = C.TERRITORY_ID)
  LEFT OUTER JOIN DW_REPORT.EMPLOYEES D ON (A.SALES_REP_ID = D.EMPLOYEE_ID)
  LEFT OUTER JOIN DW_REPORT.BOOK_FAIRS E
          ON (NVL (A.ABCDO_MARKER_ID,-99) = E.MARKER_ID
         AND NVL (A.BOOK_FAIRS_STATUS_ID,-99) = E.FAIR_STATUS_ID
         AND NVL (A.BOOK_FAIR_TYPE_ID,-99) = E.FAIR_TYPE_ID
         AND NVL (A.TRUCK_ROUTE_ID,-99) = E.ROUTE_ID
         AND NVL (A.INVOICE_OPTION_ID,-99) = E.INVOICE_OPTION_ID)
  LEFT OUTER JOIN DW_REPORT.TRANSACTION_STATUS F
          ON (F.DOCUMENT_TYPE = 'Opportunity'
         AND NVL (F.STATUS,'NA_GDW') = A.STATUS)
  LEFT OUTER JOIN DW_REPORT.CURRENCIES G ON (A.CURRENCY_ID = G.CURRENCY_ID)
  LEFT OUTER JOIN DW.DWDATE H ON (TO_CHAR (A.TRANDATE,'YYYYMMDD') = H.DATE_ID)
  LEFT OUTER JOIN DW.DWDATE I ON (TO_CHAR (A.OPEN_DATE,'YYYYMMDD') = I.DATE_ID)
  LEFT OUTER JOIN DW.DWDATE J ON (TO_CHAR (A.SHIP_DATE,'YYYYMMDD') = J.DATE_ID)
  LEFT OUTER JOIN DW.DWDATE K ON (TO_CHAR (A.CLOSE_DATE,'YYYYMMDD') = K.DATE_ID)
  LEFT OUTER JOIN DW.DWDATE L ON (TO_CHAR (A.RETURN_DATE,'YYYYMMDD') = L.DATE_ID)
  LEFT OUTER JOIN DW_REPORT.TRANSACTION_TYPE M ON (NVL (A.CUSTOM_FORM_ID,-99) = M.TRANSACTION_TYPE_ID)
  LEFT OUTER JOIN DW_REPORT.LOCATIONS N ON (NVL (A.LOCATION_ID,-99) = N.LOCATION_ID)
  LEFT OUTER JOIN DW_REPORT.CLASSES O ON (A.CLASS_ID = O.CLASS_ID)
  LEFT OUTER JOIN DW_REPORT.SUBSIDIARIES P ON (A.SUBSIDIARY_ID = P.SUBSIDIARY_ID)
  LEFT OUTER JOIN DW_REPORT.CUSTOMERS Q ON (A.CUSTOMER_ID = Q.CUSTOMER_ID) 
  WHERE 
  ((B.ACCOUNTING_PERIOD_KEY IS NULL AND A.ACCOUNTING_PERIOD_ID IS NOT NULL ) OR
  (C.TERRITORY_KEY IS NULL AND A.TERRITORY_ID IS NOT NULL ) OR
  (D.EMPLOYEE_KEY IS NULL AND A.SALES_REP_ID IS NOT NULL ) OR
  E.BOOK_FAIR_KEY IS NULL OR
  F.TRANSACTION_STATUS_KEY IS NULL OR
  (G.CURRENCY_KEY IS NULL AND A.CURRENCY_ID IS NOT NULL ) OR
  H.DATE_KEY IS NULL OR
  I.DATE_KEY IS NULL OR
  J.DATE_KEY IS NULL OR
  K.DATE_KEY IS NULL OR
  L.DATE_KEY IS NULL OR
  M.TRANSACTION_TYPE_KEY IS NULL OR
  (N.LOCATION_KEY IS NULL AND A.LOCATION_ID IS NOT NULL ) OR
  (O.CLASS_KEY IS NULL AND A.CLASS_ID IS NOT NULL ) OR
  P.SUBSIDIARY_KEY IS NULL OR
  Q.CUSTOMER_KEY IS NULL );
  
/* dw - drop book fair revenue calculation table */
DROP TABLE if exists dw.bookfair_stat;

/* dw - create book fair revenue calculation table*/
create table dw.bookfair_stat
as
select a.* from dw_report.opportunity_fact a
INNER JOIN DW.DWDATE b ON (a.open_date_key = b.date_key)
INNER JOIN DW_REPORT.TRANSACTION_TYPE c ON (a.opportunity_type_key = c.transaction_type_key)
INNER JOIN DW_REPORT.BOOK_FAIRS d ON (d.book_fair_key = a.book_fairs_key)
WHERE b.date_id <= to_char(sysdate,'YYYYMMDD')
and b.fiscal_year = (select fiscal_year from dw.dwdate
where date_id = to_char(sysdate,'YYYYMMDD'))
and (projected_total > 0 OR (projected_total = 0 AND d.fair_status NOT IN ('Feedback Taken','Complete','Cancelled')))
and c.document_type = 'Opportunity'
and c.transaction_type = 'INTL Book Fairs Form'
UNION ALL
select a.* from dw_report.opportunity_fact a
INNER JOIN DW.DWDATE b ON (a.open_date_key = b.date_key)
INNER JOIN DW_REPORT.TRANSACTION_TYPE c ON (a.opportunity_type_key = c.transaction_type_key)
INNER JOIN DW_REPORT.BOOK_FAIRS d ON (d.book_fair_key = a.book_fairs_key)
WHERE b.date_id <= to_char(sysdate,'YYYYMMDD')
and b.fiscal_year = (select fiscal_year-1 from dw.dwdate
where date_id = to_char(sysdate,'YYYYMMDD'))
and ( d.fair_status = 'Feedback Taken')
and c.document_type = 'Opportunity'
and c.transaction_type = 'INTL Book Fairs Form' ;

/* dw - drop book fair avg revenue calculation table */
DROP TABLE if exists dw.bookfair_avg;

/* dw - create book fair avg revenue calculation table*/
Create table dw.bookfair_avg
as
select a.territory_key ,d.marker, avg(projected_total) avg_amount  from  
dw_report.opportunity_fact a
INNER JOIN DW_REPORT.BOOK_FAIRS d ON (d.book_fair_key = a.book_fairs_key)
INNER JOIN DW.DWDATE b ON (a.open_date_key = b.date_key)
INNER JOIN DW_REPORT.TRANSACTION_TYPE c ON (a.opportunity_type_key = c.transaction_type_key)
where  TO_DATE(b.date_id,'YYYYMMDD') >  TRUNC(SYSDATE)  - 180
and projected_total > 0.01
and c.document_type = 'Opportunity'
and c.transaction_type = 'INTL Book Fairs Form'
group by a.territory_key ,d.marker;

/* dw - update revenue for book fairs with 0 amount*/
UPDATE dw.bookfair_stat 
SET AMOUNT =  dw.bookfair_avg.avg_amount
FROM dw.bookfair_avg
WHERE EXISTS ( SELECT 1 FROM
               DW_REPORT.BOOK_FAIRS
               where
               DW_REPORT.BOOK_FAIRS.book_fair_key = dw.bookfair_stat.book_fairs_key
               and dw.bookfair_avg.marker = DW_REPORT.BOOK_FAIRS.marker)
AND dw.bookfair_stat.AMOUNT = 0;



